#!/bin/sh

# run this script from the project root; a portable way of getting
# a script's path is hard to come by, so we assume .env is in the cwd

# -- props --
# the variant (e.g. playtest, release) if any; defaults to release
VARIANT=""

# the target (e.g. mac, win, win-server) if any; defaults to all
TARGET=""

# -- parsing --
Usage() {
  echo "usage: ./bin/build [-h] [-v <variant>] [-t <target>]"
  exit -1
}

while getopts ":hv:t:" option; do
  case "${option}" in
    h*) Usage ;;
    v*) VARIANT="$OPTARG" ;;
    t*) TARGET="$OPTARG" ;;
  esac
done

# -- commands --
# build the targets
Build() {
  # run the build script; find it in Assets/Editor/Builds/BuildAll.cs
  "$UNITY_PATH" \
    -quit -batchmode \
    -projectPath . \
    -logfile - \
    -executeMethod Builds.BuildAll.Main \
    -- \
    --variant "$VARIANT" \
    --target "$TARGET"
}

# load the environment
CheckEnv() {
  # create .env if missing
  if [ ! -f .env ]; then
    if [ ! -f .env.sample ]; then
      echo "✘ you need a .env (and a .env.sample to create it from)"
      echo "- run this script from the project root, e.g."
      echo "> ./bin/build"
      exit 1
    fi

    echo "- creating .env from .env.sample; fill it out and try again"
    cp .env.sample .env

    exit 2
  fi
}

# -- main --
Main() {
  CheckEnv

  # load env
  source ./.env

  # validate env
  if [ ! -f "$UNITY_PATH" ]; then
    echo "✘ unity (.env->UNITY_PATH) does not exist at '$UNITY_PATH'"
    exit 3
  fi

  if ps -x | grep -qG "$UNITY_PATH -projectpath .*[p]oem"; then
    echo "✘ unity is running! the build script can't run when unity is open"
    exit 4
  fi

  # run build
  Build
}

Main "$*"